import unittest

import networkx as nx

import dataflow.reaching_definitions as rd
import dataflow.def_use as du
from itertools import filterfalse


class TestDefinitionUsePairs(unittest.TestCase):

    def test_def_use_pairs(self):
        sample_function = nx.max_weight_matching

        cfg: nx.DiGraph = du.try_create_cfg_with_definitions_and_uses(sample_function)
        pairs = rd.definition_use_pairs(cfg)

        pairs_expected = [
            (255, 256), (258, 257), (255, 257), (253, 257), (256, 257), (255, 257), (256, 258),
            (256, 259), (260, 259), (254, 259), (258, 316), (253, 316), (724, 725), (735, 736),
            (735, 736), (735, 737), (740, 752), (791, 752), (755, 756), (896, 759), (902, 759),
            (755, 759), (735, 759), (874, 759), (913, 759), (896, 760), (902, 760), (755, 760),
            (735, 760), (874, 760), (759, 760), (913, 760), (896, 763), (902, 763), (755, 763),
            (735, 763), (874, 763), (913, 763), (759, 764), (764, 765), (763, 765), (896, 768),
            (902, 768), (755, 768), (735, 768), (874, 768), (759, 768), (913, 768), (896, 769),
            (902, 769), (755, 769), (735, 769), (874, 769), (759, 769), (913, 769), (769, 770),
            (896, 772), (896, 772), (902, 772), (902, 772), (755, 772), (755, 772), (735, 772),
            (735, 772), (874, 772), (874, 772), (759, 772), (759, 772), (913, 772), (913, 772),
            (735, 773), (759, 773), (896, 773), (902, 773), (755, 773), (874, 773), (913, 773),
            (764, 774), (896, 777), (902, 777), (755, 777), (735, 777), (874, 777), (759, 777),
            (913, 777), (764, 778), (362, 782), (896, 782), (902, 782), (755, 782), (735, 782),
            (874, 782), (759, 782), (913, 782), (782, 783), (896, 786), (902, 786), (755, 786),
            (735, 786), (782, 786), (399, 786), (874, 786), (759, 786), (913, 786), (896, 790),
            (902, 790), (755, 790), (735, 790), (874, 790), (759, 790), (634, 790), (913, 790),
            (759, 793), (764, 798), (759, 799), (735, 800), (759, 800), (759, 800), (896, 800),
            (902, 800), (755, 800), (874, 800), (913, 800), (764, 801), (763, 804), (769, 805),
            (763, 805), (846, 805), (735, 806), (759, 806), (896, 806), (902, 806), (755, 806),
            (763, 806), (874, 806), (913, 806), (759, 807), (759, 811), (769, 812), (846, 812),
            (759, 812), (896, 813), (896, 813), (902, 813), (902, 813), (735, 813), (759, 813),
            (759, 813), (896, 813), (902, 813), (755, 813), (874, 813), (913, 813), (740, 815),
            (791, 815), (832, 833), (832, 834), (832, 835), (822, 836), (838, 836), (823, 836),
            (837, 836), (827, 836), (853, 836), (871, 836), (828, 836), (835, 836), (861, 836),
            (835, 837), (832, 839), (843, 844), (843, 844), (843, 845), (843, 846), (260, 847),
            (254, 847), (846, 848), (846, 849), (846, 851), (822, 852), (838, 852), (854, 852),
            (823, 852), (837, 852), (849, 852), (827, 852), (853, 852), (871, 852), (851, 852),
            (828, 852), (861, 852), (849, 853), (851, 853), (843, 855), (858, 859), (858, 859),
            (822, 860), (838, 860), (854, 860), (823, 860), (837, 860), (858, 860), (827, 860),
            (853, 860), (862, 860), (871, 860), (828, 860), (861, 860), (858, 861), (858, 863),
            (822, 865), (854, 865), (827, 865), (862, 865), (838, 865), (874, 875), (823, 877),
            (837, 877), (853, 877), (874, 877), (871, 877), (828, 877), (861, 877), (874, 878),
            (823, 880), (853, 880), (861, 880), (837, 880), (874, 880), (871, 880), (828, 880),
            (881, 882), (881, 883), (823, 885), (837, 885), (881, 885), (853, 885), (871, 885),
            (828, 885), (861, 885), (881, 886), (823, 888), (881, 888), (853, 888), (861, 888),
            (837, 888), (871, 888), (828, 888), (822, 891), (854, 891), (827, 891), (862, 891),
            (838, 891), (870, 891), (822, 894), (838, 894), (854, 894), (870, 894), (827, 894),
            (862, 894), (823, 896), (839, 896), (855, 896), (896, 897), (874, 897), (913, 897),
            (896, 898), (896, 898), (896, 898), (896, 898), (902, 898), (902, 898), (874, 898),
            (874, 898), (759, 898), (759, 898), (913, 898), (913, 898), (896, 899), (874, 899),
            (913, 899), (822, 900), (838, 900), (854, 900), (870, 900), (827, 900), (862, 900),
            (823, 902), (839, 902), (855, 902), (896, 903), (896, 903), (902, 903), (902, 903),
            (902, 903), (902, 903), (874, 903), (874, 903), (759, 903), (759, 903), (913, 903),
            (913, 903), (902, 904), (874, 904), (913, 904), (902, 905), (874, 905), (913, 905),
            (822, 906), (838, 906), (854, 906), (870, 906), (827, 906), (862, 906), (863, 908),
            (823, 908), (913, 914), (913, 914), (740, 917), (791, 917), (921, 922), (921, 924),
            (921, 924), (921, 925), (921, 926), (260, 929), (254, 929), (667, 930)
        ]

        self.assertEqual(len(pairs), len(pairs_expected))

        def determine(el):
            for pair in pairs:
                if pair.def_line == el[0] and pair.use_line == el[1]:
                    return True
            return False

        not_found_pairs = list(filterfalse(determine, pairs_expected))
        self.assertEqual(0, len(not_found_pairs))
